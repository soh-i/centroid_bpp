from collections import defaultdict
import argparse

def __load_bpp_file(bppm_file):
    bppm_map = dict()
    with open(bppm_file, "r") as f:
        for line in f:
            data = line.strip().split()
            left_pos = int(data[0])
            bppm_map[left_pos] = data[2:]
    return bppm_map

def parse_bppm_file_from_centroid(bppm_map):
    result = defaultdict(lambda: 0.0)
    for attr in bppm_map.items():
        sum_prob = 0.00
        for p in attr[1]:
            right_pos, prob = p.split(":")
            result[int(right_pos)] += float(prob)
            sum_prob += float(prob)
            result[attr[0]] += sum_prob
    return result

def parse_args():
    parser = argparse.ArgumentParser(description="centroid_bppm is tiny script that allow us to show base-pair probability each base position from given bppm file. Input bppm file is generated by follwing command: `centroid_fold --posteriors 0.0001  --oposteriors out.bppm --postscript out.ps -o out.out out.fa`")
    parser.add_argument("--file", action="store", type=str, metavar=None, help="input bppm file", required=True)
    parser.add_argument("--version", action='version', version='%(prog)s 0.01')
    return parser.parse_args()

def run():
    args = parse_args()
    result = parse_bppm_file_from_centroid(__load_bpp_file(args.file))
    for pos, bpp in result.items():
        print "%s,%s" % (pos, bpp)

        
if __name__ == "__main__":
    run()
    
